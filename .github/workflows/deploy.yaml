name: CICD pipeline for truck delay application

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Install Git LFS
        run: git lfs install

      - name: Build Docker Image
        run: docker build --no-cache -t truck_delay_app .

      - name: Authenticate Docker with AWS ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 148761649452.dkr.ecr.us-east-2.amazonaws.com

      - name: Push Docker Image to ECR
        run: |
          docker tag truck_delay_app:latest 148761649452.dkr.ecr.us-east-2.amazonaws.com/truck/truck_delay:latest
          docker push 148761649452.dkr.ecr.us-east-2.amazonaws.com/truck/truck_delay:latest

      - name: Remove Unused Docker Layers
        run: docker system prune -f

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate Docker with AWS ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 148761649452.dkr.ecr.us-east-2.amazonaws.com

      - name: Deploy to AWS ECS
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-2
        run: |
          aws ecs update-service --cluster truck_delay_cluster --service truck_delay_service --force-new-deployment --region $AWS_REGION

      - name: Notify Deployment Success
        run: echo "Deployment to ECS was successful."
